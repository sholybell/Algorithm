package com.holybell.algorithm.math;


/**
 * 难度：中等
 * <p>
 * 实现 pow(x, n) ，即计算 x 的 n 次幂函数。
 * <p>
 * 不许使用循环相乘
 * <p>
 * 幂n可以是负数
 * <p>
 * 链接：https://leetcode-cn.com/problems/two-sum/solution/powx-n-by-leetcode/
 */
public class Question022_Pow {
    /**
     * 快速幂算法（递归）
     * <p>
     * 可借助乘法结合律
     *
     * @param x 被操作数字
     * @param n 幂
     */
    private static double myPow(double x, int n) {
        return Double.MIN_VALUE;
    }

    private static double myFastPow(double x, long n) {
        return Double.MIN_VALUE;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 快速幂算法（递归）
     * <p>
     * 可借助乘法结合律
     *
     * @param x 被操作数字
     * @param n 幂
     */
    private static double pow(double x, int n) {

        // 注意幂可能是负数
        long N = n;
        if (N < 0) {
            x = 1 / x;
            N = -N;
        }

        return fastPow(x, N);
    }

    /**
     * 借助乘法结合律递归操作
     * <p>
     * 两两结合相乘，递归向上操作
     *
     * @param x 被操作数字
     * @param n 幂
     */
    private static double fastPow(double x, long n) {
        if (n == 0) {
            return 1.0;
        }
        double half = fastPow(x, n / 2);
        if (n % 2 == 0) {
            return half * half;
        } else {
            return half * half * x;
        }
    }


    public static void main(String[] args) {
        System.out.println(pow(2, 10));
        System.out.println(pow(2.1, 3));
        System.out.println(pow(2, -5));
        System.out.println("--------->");
        System.out.println(pow(2, 10));
        System.out.println(myPow(2.1, 3));
        System.out.println(myPow(2, -5));
    }
}
