package com.holybell.algorithm.stack;

import com.holybell.algorithm.common.TreeNode;
import com.holybell.algorithm.common.util.TreeUtil;

import java.util.*;

/**
 * 难度：简单
 * <p>
 * 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。
 * <p>
 * 有效字符串需满足：
 * 左括号必须用相同类型的右括号闭合。
 * 左括号必须以正确的顺序闭合。
 * <p>
 * <p>
 * 示例 1：
 * 输入：s = "()"
 * 输出：true
 * <p>
 * <p>
 * 示例 2：
 * 输入：s = "()[]{}"
 * 输出：true
 * <p>
 * <p>
 * 示例 3：
 * 输入：s = "(]"
 * 输出：false
 * <p>
 * <p>
 * 示例 4：
 * 输入：s = "([)]"
 * 输出：false
 * <p>
 * <p>
 * 示例 5：
 * 输入：s = "{[]}"
 * 输出：true
 * <p>
 * <p>
 * 提示：
 * <p>
 * <p>
 * 1 <= s.length <= 104
 * s 仅由括号 '()[]{}' 组成
 */
public class LeetCode20_isValid {

    private static boolean myIsValid(String s) {

        return false;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    private static boolean isValid(String s) {

        // 长度若为奇数，一定不合法
        if (s == null || s.equals("") || s.length() == 0 || s.length() % 2 == 1) {
            return false;
        }

        Map<Character, Character> pairs = new HashMap<Character, Character>();
        pairs.put(')', '(');
        pairs.put(']', '[');
        pairs.put('}', '{');

        Stack<Character> stack = new Stack<>();

        // 将字符串中的括号拆解为字符数组
        char[] chars = s.toCharArray();

        for (char ch : chars) {
            // 字符串仅仅包含[](){}
            if (ch == '[' || ch == '(' || ch == '{') {
                stack.add(ch);
                continue;
            }

            // 先判断栈是否为空，避免字符串仅仅方式了 ] } )，右边括号，会导致访问栈顶空指针异常
            if (stack.isEmpty() || (stack.peek() != pairs.get(ch))) {
                return false;
            }

            // 栈顶已经比较过，弹出去
            stack.pop();
        }

        // 最后还要判断下栈为空才能确认左右的括号都匹配
        return stack.isEmpty();
    }

    public static void main(String[] args) {
        List<String> strList = new ArrayList<>();
        strList.add("");
        strList.add("]");
        strList.add("()");
        strList.add("([)]");
        strList.add("(((]]");
        for (String str : strList) {
            System.out.println("你的答案 字符串 " + str + " 是否有效:" + myIsValid(str));
        }
        System.out.println("------------------------------------->");
        for (String str : strList) {
            System.out.println("正确答案 字符串 " + str + " 是否有效:" + isValid(str));
        }
    }
}
