package com.holybell.algorithm.list;

import com.alibaba.fastjson.JSONObject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * 难度:中等
 * <p>
 * 给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0。
 * 找出所有满足条件且不重复的三元组。
 * <p>
 * 注意：答案中不可以包含重复的三元组。
 * (即：要考虑原数组可能存在重复元素，重复元素可能会导致答案中存在a,b,c三个元素组合的结果位置不同，但是整体重复的结果，如(-1,0,1)和(1,-1,0)符合答案，但重复)
 */
public class Question047_ThreeSum {


    /**
     * 从给定数组中求的三者之和为给定和的不重复结果集
     *
     * @param a   给定数组
     * @param sum 给定和值
     */
    private static List<List<Integer>> myThreeSum(int[] a, int sum) {
        return null;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 从给定数组中求的三者之和为给定和的不重复结果集
     *
     * @param a   给定数组
     * @param sum 给定和值
     */
    private static List<List<Integer>> threeSum(int[] a, int sum) {

        // 以下情况不处理
        if (a == null || a.length == 0 || a.length < 3) {
            return null;
        }

        // 缓存最终答案
        List<List<Integer>> result = new ArrayList<>();

        // 排序数组，以下操作需要数组有序
        Arrays.sort(a);

        // 遍历数组，截止长度-2位置，作为第一个元素
        for (int i = 0; i < a.length - 2; i++) {

            // 数组有序，当前已经大于目标和，遍历后续元素只会更大
            if (a[i] > sum) {
                break;
            }

            // 如果当前元素等于前一个元素，那么不需要处理，因为只会得到和前一个元素处理完毕之后相同的结果，反而会出现重复的结果集
            if (i > 0 && a[i - 1] == a[i]) {
                // 继续处理下一个元素
                continue;
            }

            int start = i + 1;
            int end = a.length - 1;

            // 将剩下的数组做两路归并，使用头尾指针向中间聚拢（因为数组排序之后有序，不符合条件的指针可以往中间移动）
            while (start < end) {
                int _sum = a[i] + a[start] + a[end];
                // 三个元素的和就是给定和值
                if (_sum == sum) {
                    // 记录结果
                    result.add(Arrays.asList(a[i], a[start], a[end]));
                    // 头尾指针向中间聚拢，并且跳过重复的元素
                    while (start < end && a[start] == a[++start]) {
                    }
                    while (start < end && a[end] == a[--end]) {
                    }
                } else if (_sum < sum) {   //  和值小于给定值，那么头部指针往中间移动
                    while (start < end && a[start] == a[++start]) {
                    }
                } else {  // 和值大于给定值，那么尾部指针往中间移动
                    while (start < end && a[end] == a[--end]) {
                    }
                }
            }
        }

        return result;
    }


    public static void main(String[] args) {
        int[] nums1 = {-1, 0, 1, 2, -1, -4};
        int[] nums2 = {0, 0, 0};
        System.out.println("正确答案(nums1):" + JSONObject.toJSONString(threeSum(nums1, 0)));
        System.out.println("正确答案(nums2):" + JSONObject.toJSONString(threeSum(nums2, 0)));
        System.out.println("------------------------------------------------------------------>");
        System.out.println("本次答案(nums1):" + JSONObject.toJSONString(myThreeSum(nums1, 0)));
        System.out.println("本次答案(nums2):" + JSONObject.toJSONString(myThreeSum(nums2, 0)));
    }
}
