package com.holybell.algorithm.list;


/**
 * 难度:中等
 * <p>
 * 有一个升序排列的数组，数组中可能有正数，负数，0，求数组中绝对值最小的值，如数组{-10，-5，-2,7,15,50}，绝对值最小的是-2
 * <p>
 * 注意区分三种情况：
 * ① 如果数组第一个元素为非负数，那么绝对值最小的是第一个元素
 * ② 如果数组中最后一个元素为负数，那么绝对值最小的是最后一个元素
 * ③ 如果数组中既有正数又有负数，首先找到正数与负数的分界点，如果分界点恰好为0，那么0就是绝对值最小值，否则通过比较分界点左右的正数与负数的绝对值来确定最小值
 */
public class Question041_MinAbsoluteValue {

    private static int myGetMinAbsoluteValue(int[] a) {
        return Integer.MIN_VALUE;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 从给定升序数组中，查找绝对值最小的元素
     *
     * @param a 给定升序数组
     */
    private static int getMinAbsoluteValue(int[] a) {

        // 以下情况不处理
        if (a == null || a.length == 0) {
            return Integer.MIN_VALUE;
        }

        // 升序数组，如果第一个元素是非负，那么就是第一个元素绝对值最小
        if (a[0] >= 0) {
            return a[0];
        }

        // 升序数组，如果最后一个数组非正，那么最后一个元素绝对值最小
        if (a[a.length - 1] <= 0) {
            return a[a.length - 1];
        }

        // 如果数组存在正负数两种情况，那么采用二分查找法，定位正负数分界元素
        int start = 0;
        int end = a.length - 1;
        int mid;
        while (true) {
            mid = (start + end) >>> 1;
            // 如果找到0，那么0的绝对值一定最小，直接返回
            if (a[mid] == 0) {
                return a[mid];
            } else {
                // 没有找到0，看看当前数字是否为正负分界
                if (a[mid] > 0) {
                    // a[mid]为正数，由于数组升序，判断前一个数字是否为非正整数
                    if (a[mid - 1] == 0) {
                        // 找到0直接返回
                        return a[mid - 1];
                    } else if (a[mid - 1] < 0) {
                        // 找到mid为正负分界，终止循环
                        break;
                    } else if (a[mid - 1] > 0) {
                        // 前一个数字仍然为正数，下界变为mid-1，重新开始二分查找
                        end = mid - 1;
                    }
                } else if (a[mid] < 0) {
                    // a[mid]为负数，由于数组升序，判断后一个数字是否为非负整数
                    if (a[mid + 1] == 0) {
                        // 找到0直接返回
                        return a[mid + 1];
                    } else if (a[mid + 1] > 0) {
                        // 找到mid为正负分界，终止循环
                        break;
                    } else if (a[mid + 1] < 0) {
                        // 后一个数字仍然为负数，上界变为mid+1，重新开始二分查找
                        start = mid + 1;
                    }
                }
            }
        }

        // 通过上述二分查找，走到此处a[mid]必定为正负分界，只是a[mid]为正数或者负数未知
        // 直接比较 a[mid-1]、a[mid]、a[mid+1]三个数字的绝对值最小值
        if (a[mid] > 0) {
            if (Math.abs(a[mid]) < Math.abs(a[mid - 1])) {
                return a[mid];
            } else {
                return a[mid - 1];
            }
        } else {  // 这里只可能a[mid]<0  a[mid]==0前面讨论过了
            if (Math.abs(a[mid]) < Math.abs(a[mid + 1])) {
                return a[mid];
            } else {
                return a[mid + 1];
            }
        }
    }

    public static void main(String[] args) {
        int a1[] = {-10, -5, -2, 7, 15, 50};
        int a2[] = {2, 4, 6, 8, 27};
        int a3[] = {-13, -9, -7, -3};
        System.out.println("正确答案a1:" + getMinAbsoluteValue(a1));
        System.out.println("正确答案a2:" + getMinAbsoluteValue(a2));
        System.out.println("正确答案a3:" + getMinAbsoluteValue(a3));
        System.out.println("----------------------------------->");
        System.out.println("本次答案a1:" + myGetMinAbsoluteValue(a1));
        System.out.println("本次答案a2:" + myGetMinAbsoluteValue(a2));
        System.out.println("本次答案a3:" + myGetMinAbsoluteValue(a3));
    }
}
