package com.holybell.algorithm.bit;


import java.util.Arrays;

/**
 * 难度：中等
 * <p>
 * 给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。
 * <p>
 * 示例 1:
 * 输入: 2
 * 输出: [0,1,1]
 * <p>
 * 示例 2:
 * 输入: 5
 * 输出: [0,1,1,2,1,2]
 * <p>
 * 进阶:
 * <p>
 * 给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？ 要求算法的空间复杂度为O(n)。
 * <p>
 * 链接：https://leetcode-cn.com/problems/counting-bits
 */
public class LeetCode338_countBits {

    /**
     * 由于Integer为固定长度32位，循环遍历一个整形数字为固定次数k，外层再循环一个num次，O(N)=O(k*num)
     *
     * @param num 非负整数
     */
    private static int[] myCountBits(int num) {
        return null;
    }


    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 由于Integer为固定长度32位，循环遍历一个整形数字为固定次数k，外层再循环一个num次，O(N)=O(k*num)
     *
     * @param num 非负整数
     */
    private static int[] countBitsV1(int num) {

        if (num < 0) {
            return null;
        }

        int[] bitCounts = new int[num + 1];
        for (int i = 1; i <= num; i++) {
            int count = 0;
            int temp = i;
            while (temp != 0) {
                count++;
                temp = temp & (temp - 1);
            }
            bitCounts[i] = count;
        }
        return bitCounts;
    }

    // --------------------------------------------------------------------

    private static int[] countBitsV2(int num) {
        int[] bitCounts = new int[num + 1];
        for (int i = 1; i <= num; i++) {
            // TODO 每一个数字可以看做 前面某个数值*2 在加上0或者1获得，从而根据这个条件有以下递推公式
            bitCounts[i] = bitCounts[i >> 1] + (i & 1);
        }
        return bitCounts;
    }

    public static void main(String[] args) {

        System.out.println("从0到2每个数字的二进制为1个数：" + Arrays.toString(countBitsV1(2)));
        System.out.println("从0到5每个数字的二进制为1个数：" + Arrays.toString(countBitsV2(5)));

        System.out.println("-------------------------------->");

        System.out.println("从0到2每个数字的二进制为1个数：" + Arrays.toString(myCountBits(2)));
        System.out.println("从0到5每个数字的二进制为1个数：" + Arrays.toString(myCountBits(5)));

    }
}
