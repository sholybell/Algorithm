package com.holybell.algorithm.bit;

/**
 * 难度:简单
 * <p>
 * 给定一个整数，编写一个函数来判断它是否是 2 的幂次方。
 * <p>
 * 示例 1:
 * <p>
 * 输入: 1
 * 输出: true
 * 解释: 20 = 1
 * <p>
 * 示例 2:
 * <p>
 * 输入: 16
 * 输出: true
 * 解释: 24 = 16
 * <p>
 * 示例 3:
 * <p>
 * 输入: 218
 * 输出: false
 * <p>
 * Related Topics 位运算 数学
 */
public class LeetCode231_isPowerOfTwo {

    private static boolean myIsPowerOfTwo(int n){
        return false;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 此解法可以解答，但超时
     */
    public boolean isPowerOfTwoV1(int n) {
        if (n == 1 || n == 2) {
            return true;
        }

        int temp = 2;
        while (temp < n) {
            temp = temp * 2;
            if (temp == n) {
                return true;
            }
        }
        return false;
    }

    /**
     * 明白一点，2的幂次方数字二进制表示一定只有一位1，通过 n & (n-1) 为0则表示为2次幂
     */
    private static boolean isPowerOfTwoV2(int n) {
        if (n == 0) {
            return false;   // TODO 避免n=0对二进制的运算干扰
        }

        long temp = (long) n;       // TODO 避免Integer边间的干扰

        return (temp & (temp - 1)) == 0;
    }

    /**
     * n & (-n) 可以保留n的最后一位二进制1，其他位数都为0，如果n为二进制数，那么 n & (-n)=n
     */
    private static boolean isPowerOfTwoV3(int n) {
        if (n == 0) {
            return false;       // TODO 避免n=0对二进制的运算干扰
        }
        long temp = (long) n;   // TODO 避免Integer边间的干扰
        return (temp & (-temp)) == temp;
    }

    public static void main(String[] args) {
        System.out.println("你的答案:");
        System.out.println("-2147483648是否为2的幂次方: " + myIsPowerOfTwo(-2147483648));
        System.out.println("8是否为2的幂次方: " + myIsPowerOfTwo(8));
        System.out.println("------------------------>");
        System.out.println("正确答案:");
        System.out.println("-2147483648是否为2的幂次方: " + isPowerOfTwoV2(-2147483648));
        System.out.println("8是否为2的幂次方: " + isPowerOfTwoV3(8));
    }
}
