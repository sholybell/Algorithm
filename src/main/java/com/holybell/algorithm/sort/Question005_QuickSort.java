package com.holybell.algorithm.sort;

import com.holybell.algorithm.common.Base;

import java.util.Arrays;

/**
 * 快速排序：
 * <p>
 * 对于一组给定的记录，通过一趟排序后，将原序列分为两部分，
 * 其中前一部分的所有记录均比后一部分的所有记录小，
 * 然后再依次对前后两部分的记录进行快速排序，
 * 递归该过程，直到序列中的所有记录均有序为止
 */
public class Question005_QuickSort extends Base {

    private static void myQuickSort(int a[], int low, int high) {


    }


    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    private static void quickSort(int a[], int low, int high) {

        // 如果入参数组为空，直接返回
        if (a == null || a.length == 0) {
            return;
        }

        // 如果低位下标已经超过或者等于高位下标，说明不需要再左右比较了
        if (low >= high) {
            return;
        }

        int mid = low;          // 使用低位下标作为本次快排的中间元素
        int midValue = a[low];  // 中间元素的值
        int hi = high;          // 高位下标

        while (mid < hi) {      // mid需要和hi进行交换，因此 mid == hi 条件不成立
            while (mid < hi && a[hi] > midValue) {  // mid<hi 且 从右边开始的元素>midValue，右边下标左移一位，表示该元素已经确认可以放在中间元素右边
                hi--;
            }
            if (mid < hi) {         // mid<hi 发现右边有一个元素<=midValue，那么将a[hi]的元素和a[mid]交换，左边下标右移一位，表示有一个元素确认可以放在中间元素左边
                swap(a, mid, hi);
                mid++;
            }

            // 此时将一个右边的元素切换到了左边，并不知道这个从左边换到右边的元素是否可以放到左边，但是可以明确右边的一定要放到左边
            // 那么此时从左边开始继续往右比较

            while (mid < hi && a[mid] <= midValue) {    // mid<hi 且 从左边开始的元素<=midValue，左边的下标右移一位，表示该元素可以确认放在中间元素左边
                mid++;
            }
            if (mid < hi) {      // mid<hi 发现右边有一个元素>midValue，那么将a[hi]的元素和a[mid]交换，右边下标左移一位，表示有一个元素确认可以放在中间元素右边
                swap(a, mid, hi);
                hi--;
            }
        }

        a[mid] = midValue;      // 经过上面的循环，>= midValue的元素已经放到了mid的右边， <midValue的元素已经放到了mid的左边，midValue放到mid位置

        // 此时仅仅是midValue这个元素确定了位置，左右子数组仍旧无序，递归快排左右子数组
        myQuickSort(a, low, mid - 1);
        myQuickSort(a, mid + 1, high);
    }

    public static void main(String[] args) {
        int a[] = {5, 4, 9, 8, 7, 6, 0, 1, 3, 2};
        myQuickSort(a, 0, a.length - 1);
        System.out.println(Arrays.toString(a));
    }
}
