package com.holybell.algorithm.board.dfs;

/**
 * 有 n 个城市，其中一些彼此相连，另一些没有相连。
 * 如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。
 * <p>
 * 省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。
 * <p>
 * 给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，
 * 而isConnected[i][j] = 0 表示二者不直接相连。
 * <p>
 * 返回矩阵中 省份 的数量。
 * <p>
 * <p>
 * 示例 1：
 * 输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]
 * 输出：2
 * <p>
 * <p>
 * 示例 2：
 * 输入：isConnected = [[1,0,0],[0,1,0],[0,0,1]]
 * 输出：3
 * <p>
 * <p>
 * 提示：
 * 1 <= n <= 200
 * n == isConnected.length
 * n == isConnected[i].length
 * isConnected[i][j] 为 1 或 0
 * isConnected[i][i] == 1
 * isConnected[i][j] == isConnected[j][i]
 */
public class LeetCode547_findCircleNum {

    /**
     * 给定一个矩阵，判断是存在几个省份，省份的确立为，从一个城市出发，可以经过其他城市到达，
     * 所有城市都无法到达的城市，独立成为一个省份
     */
    private static int myFindCircleNum(int[][] isConnected) {
        return -1;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 这一定是一个正方形矩阵，长宽就是城市数量
     */
    private static int findCircleNum(int[][] isConnected) {
        int m = isConnected.length;             // 所有城市数量
        boolean[] visited = new boolean[m];     // 记录每个已经被DFS过的城市
        int provinces = 0;
        for (int i = 0; i < m; i++) {
            if (!visited[i]) {                  // 该城市并未通过其他城市到达过
                dfs(isConnected, visited, m, i);
                provinces++;
            }
        }
        return provinces;
    }

    private static void dfs(int[][] isConnected, boolean[] visited, int citys, int i) {
        for (int j = 0; j < citys; j++) {       // 从当前城市出发，看看能否走到其他任何一个城市，若可以，这些城市之间构成一个省份
            if (isConnected[i][j] == 1 && !visited[j]) {
                visited[j] = true;
                dfs(isConnected, visited, citys, j);
            }
        }

    }

    public static void main(String[] args) {
        int[][] grid = new int[][]{
                {1, 1, 0},
                {1, 1, 0},
                {0, 0, 1}
        };
        System.out.println("你的答案:" + myFindCircleNum(grid));
        System.out.println("----------------------------->");
        System.out.println("正确答案:" + findCircleNum(grid));
    }
}
