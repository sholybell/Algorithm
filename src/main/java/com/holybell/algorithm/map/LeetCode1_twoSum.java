package com.holybell.algorithm.map;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。
 * 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。
 * 你可以按任意顺序返回答案。
 * <p>
 * <p>
 * 示例 1：
 * 输入：nums = [2,7,11,15], target = 9
 * 输出：[0,1]
 * 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
 * <p>
 * <p>
 * 示例 2：
 * 输入：nums = [3,2,4], target = 6
 * 输出：[1,2]
 * <p>
 * <p>
 * 示例 3：
 * 输入：nums = [3,3], target = 6
 * 输出：[0,1]
 * <p>
 * <p>
 * 提示：
 * <p>
 * <p>
 * 2 <= nums.length <= 103
 * -109 <= nums[i] <= 109
 * -109 <= target <= 109
 * 只会存在一个有效答案
 */
public class LeetCode1_twoSum {

    private static int[] myTwoSum(int[] nums, int target) {
        return new int[0];
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 一边遍历数组，一边查询是否当前遍历是数组元素是否在HashMap中存在相加为target的元素
     * <p>
     * 题目虽然标明仅仅有一个有效答案，但是可能存在重复数字，比如nums={5,5},target=10，
     * 上述情况，如果将数组通过两次循环存入Map中，将会导致重复数字丢失其他数组位置信息
     */
    private static int[] twoSum(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return new int[0];
        }

        Map<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            // 尝试从HashMap中查询数组是否有 target-当前元素 的值
            Integer pos = map.get(target - nums[i]);
            // 查询到目标(题目表明:有效答案仅仅一个)
            if (pos != null) {
                return new int[]{i, pos};
            }

            // 上面没有找到，继续遍历数组，将数组信息存入HashMap中
            map.put(nums[i], i);
        }

        // 不存在结果
        return new int[0];
    }

    public static void main(String[] args) {
        int[] nums1 = new int[]{2, 5, 5, 11};
        int[] nums2 = new int[]{2, 7, 11, 15};

        System.out.println("你的答案:");
        System.out.println(Arrays.toString(nums1) + " target: 10 --> " + Arrays.toString(myTwoSum(nums1, 10)));
        System.out.println(Arrays.toString(nums2) + " target: 9 --> " + Arrays.toString(myTwoSum(nums2, 9)));

        System.out.println();

        System.out.println("正确答案:");
        System.out.println(Arrays.toString(nums1) + " target: 10 --> " + Arrays.toString(twoSum(nums1, 10)));
        System.out.println(Arrays.toString(nums2) + " target: 9 --> " + Arrays.toString(twoSum(nums2, 9)));

    }
}
