package com.holybell.algorithm.dp;

import java.util.Arrays;

/**
 * 难度:中等
 * <p>
 * 给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。
 * 你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
 * 返回获得利润的最大值。
 * 注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。
 * <p>
 * 示例 1:
 * <p>
 * 输入: prices = [1, 3, 2, 8, 4, 9], fee = 2
 * 输出: 8
 * 解释: 能够达到的最大利润:
 * 在此处买入 prices[0] = 1
 * 在此处卖出 prices[3] = 8
 * 在此处买入 prices[4] = 4
 * 在此处卖出 prices[5] = 9
 * 总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
 * <p>
 * 注意:
 * <p>
 * <p>
 * 0 < prices.length <= 50000.
 * 0 < prices[i] < 50000.
 * 0 <= fee < 50000.
 * <p>
 * Related Topics 贪心算法 数组 动态规划
 */
public class LeetCode714_maxProfitWithFee {

    private static int myMaxProfit(int[] prices, int fee) {
        return 0;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 买入收取一次手续费
     */
    private static int maxProfitV1(int[] prices, int fee) {

        int n = prices.length;

        if (n == 0 || n == 1) {
            return 0;
        }

        int[][] dp = new int[n][2];

        dp[0][0] = 0;
        dp[0][1] = -prices[0] - fee;    // 买入算一次手续费

        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i] - fee);  // 买入算一次手续费
        }

        return dp[n - 1][0];
    }

    // --------------------------------------------------------------------

    /**
     * 卖出算一次手续费
     */
    private static int maxProfitV2(int[] prices, int fee) {
        int n = prices.length;

        if (n == 0 || n == 1) {
            return 0;
        }

        int[][] dp = new int[n][2];

        dp[0][0] = 0;           // TODO 这里是未持有，不是卖出，无需-fee
        dp[0][1] = -prices[0];

        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i] - fee);  //卖出算一次手续费
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
        }

        return dp[n - 1][0];
    }

    public static void main(String[] args) {
        int[] stocks = new int[]{1, 3, 2, 8, 4, 9};
        System.out.println("你的答案:");
        System.out.println("数组 : " + Arrays.toString(stocks) + " 2次交易最大收益 : " + myMaxProfit(stocks, 2));
        System.out.println("-------------------------->");
        System.out.println("正确答案:");
        System.out.println("数组 : " + Arrays.toString(stocks) + " 2次交易最大收益 : " + maxProfitV1(stocks, 2));
        System.out.println("数组 : " + Arrays.toString(stocks) + " 2次交易最大收益 : " + maxProfitV2(stocks, 2));
    }
}
