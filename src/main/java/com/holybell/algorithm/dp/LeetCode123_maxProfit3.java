package com.holybell.algorithm.dp;

import java.util.Arrays;

/**
 * 难度:困难
 * <p>
 * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 * <p>
 * 注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * <p>
 * 示例 1:
 * 输入: [3,3,5,0,0,3,1,4]
 * 输出: 6
 * 解释:
 * 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 * 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 * <p>
 * 示例 2:
 * 输入: [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。  
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。  
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * <p>
 * 示例 3:
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。
 * <p>
 * 1 <= prices.length <= 105
 * 0 <= prices[i] <= 105
 */
public class LeetCode123_maxProfit3 {

    /**
     * 给定一个数组，数组每个元素表示某天股价，求给定一次买入卖出机会情况下，如何得到最大利润
     *
     * @param prices 股价数组
     */
    private static int myMaxProfit(int[] prices) {
        return 0;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 给定一个数组，数组每个元素表示某天股价，求给定一次买入卖出机会情况下，如何得到最大利润
     * 联系{@link LeetCode121_maxProfit1} 本题没有要求最大交易次数，121题要求只能交易一次
     *
     * @param prices 股价数组
     */
    private static int maxProfitV1(int[] prices) {

        int n = prices.length;

        if (n == 0 || n == 1) {
            return 0;
        }

        int[][][] dp = new int[n][2][3];

        for (int i = 0; i < n; i++) {
            // 先处理第三维度为0的情况
            dp[i][0][0] = 0;
            dp[i][1][0] = Integer.MIN_VALUE / 2;    // 不存在的交易直接给一个足够大的负数即可

            for (int j = 1; j <= 2; j++) {
                if (i == 0) {
                    dp[0][0][j] = 0;            // 第0天未持有，买卖多少次都是0
                    dp[0][1][j] = -prices[0];   // 第0天持有，买卖多少次，剩下的都只能是负的第一天的股价
                } else {
                    dp[i][0][j] = Math.max(dp[i - 1][0][j], dp[i - 1][1][j] + prices[i]);
                    dp[i][1][j] = Math.max(dp[i - 1][1][j], dp[i - 1][0][j - 1] - prices[i]);   // TODO 买入算一次交易，因此上一天只能是j-1次交易
                }
            }
        }

        return Arrays.stream(dp[n - 1][0]).max().getAsInt();
    }

    // --------------------------------------------------------------------

    /**
     * 区别v1解法，本解法使用卖出做完一次交易完成的分割
     */
    private static int maxProfitV2(int[] prices) {

        int n = prices.length;

        if (n == 0 || n == 1) {
            return 0;
        }

        int[][][] dp = new int[n][2][3];

        for (int i = 0; i < n; i++) {
            // 先处理第三维度为0的情况
            dp[i][0][0] = 0;

            // TODO 不同于以买入作为一次交易，如果以卖出作为一次交易，那么交一次数为0的时候，可持有股票
            if (i == 0) {
                dp[0][1][0] = -prices[0];
            } else {
                dp[i][1][0] = Math.max(dp[i - 1][1][0], -prices[i]);
            }

            for (int j = 1; j <= 2; j++) {
                if (i == 0) {
                    dp[0][0][j] = 0;            // 第0天未持有，买卖多少次都是0
                    dp[0][1][j] = -prices[0];   // 第0天持有，买卖多少次，剩下的都只能是负的第一天的股价
                } else {
                    dp[i][0][j] = Math.max(dp[i - 1][0][j], dp[i - 1][1][j - 1] + prices[i]);   // TODO 卖出算一次交易，因此上一天持有股票只能是j-1次
                    dp[i][1][j] = Math.max(dp[i - 1][1][j], dp[i - 1][0][j] - prices[i]);
                }
            }
        }

        return Arrays.stream(dp[n - 1][0]).max().getAsInt();
    }


    public static void main(String[] args) {
        int[] stocks = new int[]{3, 3, 5, 0, 0, 3, 1, 4};
        System.out.println("你的答案:");
        System.out.println("数组 : " + Arrays.toString(stocks) + " 交易两次最大收益为 :" + myMaxProfit(stocks));
        System.out.println("--------------------->");
        System.out.println("正确答案:");
        System.out.println("数组 : " + Arrays.toString(stocks) + " 交易两次最大收益为 :" + maxProfitV1(stocks));
        System.out.println("数组 : " + Arrays.toString(stocks) + " 交易两次最大收益为 :" + maxProfitV2(stocks));
    }
}
