package com.holybell.algorithm.dp;


/**
 * 难度:困难
 * <p>
 * 数组中一个数字减去它右边数组中的一个数字可以得到一个差值，求所有可能的差值的最大值，
 * 例如，数组{1,4,17,3,2,9}中，最大的差值为17-2=15,求这个最大差值
 * <p>
 * 这个数组不能重新排序，不然就变了位置，要求是左边减去右边的元素
 */
public class Question038_MaxSubstract {

    /**
     * 动态规划法:
     * <p>
     * 可以采用两个数组辅助，数组1记录遍历到某位置遇到的最大值，数组2记录最大值减去当前元素的值，然后和前面计算的最大差值比较取更大的记录
     *
     * @param a 给定数组
     * @return 左边元素-右边元素最大差值
     */
    private static int myMaxSubtract(int a[]) {

        return Integer.MIN_VALUE;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 动态规划法:
     * <p>
     * 可以采用两个数组辅助，数组1记录遍历到某位置遇到的最大值，数组2记录最大值减去当前元素的值，然后和前面计算的最大差值比较取更大的记录
     *
     * @param a 给定数组
     * @return 左边元素-右边元素最大差值
     */
    private static int maxSubtract(int a[]) {

        // 以下情况不处理
        if (a == null || a.length == 0) {
            return Integer.MIN_VALUE;
        }

        // 使用一个数组记录遍历到某个位置遇到的该数组最大的值，除非遇到更大的否则不变
        int[] max = new int[a.length];
        // 记录遍历到某个位置，使用上面最大数字-当前位置元素的值 然后和 前一个位置比较
        int[] diff = new int[a.length];

        max[0] = diff[0] = a[0];

        for (int i = 1; i < a.length; i++) { //  从1开始遍历
            // 比较当前元素是否大于前面找到的最大元素，如果更大记录当前值，如果没有更大，记录前面最大值
            max[i] = Math.max(max[i - 1], a[i]);
            // 左边元素-右边元素差  要么是前面计算过得，要么就是使用前面找到的最大值-当前元素（当前元素作为减数，可能遇到更小的）
            diff[i] = Math.max(diff[i - 1], max[i] - a[i]);
        }
        // diff数组最后一个元素即为差值最大结果
        return diff[a.length - 1];
    }

    public static void main(String[] args) {
        int a[] = {1, 4, 17, 3, 2, 9};
        System.out.println("正确答案:" + maxSubtract(a));
        System.out.println("本次答案:" + myMaxSubtract(a));
    }
}
