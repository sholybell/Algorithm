package com.holybell.algorithm.dp.array;

import java.util.Arrays;

/**
 * 难度:简单
 * <p>
 * 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
 * <p>
 * <p>
 * 示例 1：
 * 输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
 * 输出：6
 * 解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。
 * <p>
 * <p>
 * 示例 2：
 * 输入：nums = [1]
 * 输出：1
 * <p>
 * <p>
 * 示例 3：
 * 输入：nums = [0]
 * 输出：0
 * <p>
 * <p>
 * 示例 4：
 * 输入：nums = [-1]
 * 输出：-1
 * <p>
 * <p>
 * 示例 5：
 * 输入：nums = [-100000]
 * 输出：-100000
 * <p>
 * <p>
 * 提示：
 * 1 <= nums.length <= 3 * 104
 * -105 <= nums[i] <= 105
 * <p>
 * <p>
 * 进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。
 * Related Topics 数组 分治算法 动态规划
 */
public class LeetCode53_maxSubArray {

    private static int myMaxSubArray(int[] nums) {
        return -1;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    public static int maxSubArrayV1(int[] nums) {

        int[] dp = new int[nums.length];
        dp[0] = nums[0];

        int max = dp[0];
        for (int i = 1; i < nums.length; i++) {
            // TODO 计算每一个元素参与的子数组最大值，如果fmax(i-1)+nums[i] > nums[i]，那么当前元素的应该与前面的元素构成到达这个位置的最大值
            // TODO 否则独自构成到达此位置最大值
            dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]);
            max = Math.max(max, dp[i]);
        }

        return max;
    }

    // --------------------------------------------------------------------

    /**
     * 双重循环解法
     */
    public static int maxSubArrayV2(int[] nums) {

        int n = nums.length;
        if (n == 1) {
            return nums[0];
        }

        int max = nums[0];
        for (int i = 0; i < n; i++) {
            int temp = nums[i];
            max = Math.max(temp, max);
            for (int j = i + 1; j < n; j++) {
                temp += nums[j];
                max = Math.max(max, temp);
            }
        }
        return max;
    }

    public static void main(String[] args) {
        int[] nums1 = new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4};
        int[] nums2 = new int[]{-2, 1};
        System.out.println("你的答案:");
        System.out.println("数组: " + Arrays.toString(nums1) + " 最大子数组和: " + myMaxSubArray(nums1));
        System.out.println("数组: " + Arrays.toString(nums2) + " 最大子数组和: " + myMaxSubArray(nums2));
        System.out.println("----------------------------------->");
        System.out.println("正确答案:");
        System.out.println("数组: " + Arrays.toString(nums1) + " 最大子数组和: " + maxSubArrayV1(nums1));
        System.out.println("数组: " + Arrays.toString(nums2) + " 最大子数组和: " + maxSubArrayV2(nums2));

    }
}
