package com.holybell.algorithm.dp;

/**
 * 难度:简单
 * <p>
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 * 如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。
 * <p>
 * 注意：你不能在买入股票前卖出股票。
 * <p>
 * 示例 1:
 * 输入: [7,1,5,3,6,4]
 * 输出: 5
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
 * 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
 * <p>
 * 示例 2:
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 */
public class LeetCode121_maxProfit {

    /**
     * 给定一个数组，数组每个元素表示某天股价，求给定一次买入卖出机会情况下，如何得到最大利润
     *
     * @param prices 股价数组
     */
    private static int _maxProfit(int[] prices) {
        return 0;
    }
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 给定一个数组，数组每个元素表示某天股价，求给定一次买入卖出机会情况下，如何得到最大利润
     *
     * @param prices 股价数组
     */
    private static int maxProfit(int[] prices) {
        // 如果数组对象不合法，直接返回0
        if (prices == null || prices.length == 0) {
            return 0;
        }
        // 分析这个题目，主要变量有：
        // 1. 交易日
        // 2. 最大交易次数(由于本题仅仅要求一次交易，不作考虑)
        // 3. 当日是否持有股票
        // 将上述变量抽象为数组里面的每一个纬度
        int[][] dp = new int[prices.length][2];    // 第一纬度表示交易日，第二维度用0和1分别表示是否持有股票

        // 状态转变公式:
        // 当日未持有股票:
        // dp[i][j][0] = max(dp[i-1][0],dp[i-i][1]+prices[i])
        // 要么前日本来就没有持有股票，要么就是前日持有股票，今日售出，所以利润要加上当日股票价格prices[i]
        //
        // 当日持有股票:
        // dp[i][j][1]= max(dp[i-1][1], -prices[i])
        // 要么前日本来就持有股票，要么就是前日没有持有股票，今日购入，所以利润减去当日股票价格prices[i]，
        // 由于本题只允许交易一次，因此如果前日未购入，必须前面所有交易日都没有交易，利润恒定为0，因此不是dp[i-1][0]-prices[i]

        dp[0][0] = 0;           // 第一天没有买入，利润一定是0
        dp[0][1] = -prices[0];  // 第一天就买入，利润就是买入之后的支出

        for (int i = 1; i < prices.length; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            dp[i][1] = Math.max(dp[i - 1][1], -prices[i]);
        }

        // 最后一定是dp[最后一天][0]利润最大，因为售出了，dp[最后一天][1]还持有股票未售出不应为最大利润
        return dp[prices.length - 1][0];
    }

    public static void main(String[] args) {
        int[] stocks = new int[]{7, 1, 5, 3, 6, 4};
        System.out.println("你的答案:" + _maxProfit(stocks));
        System.out.println("--------------------->");
        System.out.println("正确答案:" + maxProfit(stocks));
    }
}
