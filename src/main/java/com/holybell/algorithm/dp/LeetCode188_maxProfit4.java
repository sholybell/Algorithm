package com.holybell.algorithm.dp;

import java.util.Arrays;

/**
 * 难度:困难
 * <p>
 * 给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
 * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * <p>
 * <p>
 * 示例 1：
 * 输入：k = 2, prices = [2,4,1]
 * 输出：2
 * 解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。
 * <p>
 * <p>
 * 示例 2：
 * 输入：k = 2, prices = [3,2,6,5,0,3]
 * 输出：7
 * 解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4。
 * 随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3。
 * <p>
 * <p>
 * 提示：
 * <p>
 * <p>
 * 0 <= k <= 100
 * 0 <= prices.length <= 1000
 * 0 <= prices[i] <= 1000
 * <p>
 * Related Topics 动态规划
 */
public class LeetCode188_maxProfit4 {

    private static int myMaxProfit(int k, int[] prices) {
        return 0;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    private static int maxProfitV1(int k, int[] prices) {

        int n = prices.length;

        if (n == 0 || n == 1) {
            return 0;
        }

        k = Math.min(k, n / 2); // TODO k最大就是数组的一半

        int[][][] dp = new int[n][2][k + 1];  // 交易次数为[0,k]

        for (int i = 0; i < n; i++) {

            dp[i][0][0] = 0;
            dp[i][1][0] = Integer.MIN_VALUE / 2;    // 不能太小否则会溢出

            for (int j = 1; j <= k; j++) {
                if (i == 0) {
                    dp[0][0][j] = 0;
                    dp[0][1][j] = -prices[0];
                } else {
                    dp[i][0][j] = Math.max(dp[i - 1][0][j], dp[i - 1][1][j] + prices[i]);
                    dp[i][1][j] = Math.max(dp[i - 1][1][j], dp[i - 1][0][j - 1] - prices[i]);
                }
            }
        }
        return Arrays.stream(dp[n - 1][0]).max().getAsInt();
    }

    // --------------------------------------------------------------------

    private static int maxProfitV2(int k, int[] prices) {

        int n = prices.length;

        if (n == 0 || n == 1) {
            return 0;
        }

        k = Math.min(k, n / 2);

        int[][][] dp = new int[n][2][k + 1];

        for (int i = 0; i < n; i++) {

            dp[i][0][0] = 0;

            if (i == 0) {
                dp[0][1][0] = -prices[0];     // 卖出才算一次交易，那么0次交易的时候，可以持有股票
            } else {
                dp[i][1][0] = Math.max(dp[i - 1][1][0], -prices[i]);     // 除了第0天，后面每天0次交易都是前面0次最大值和当日买入的值取较大值
            }

            for (int j = 1; j <= k; j++) {
                if (i == 0) {
                    dp[0][0][j] = 0;
                    dp[0][1][j] = -prices[0];  // 无论第0天卖多少次，只要持有股票，收益一定是-princes[0]
                } else {
                    dp[i][0][j] = Math.max(dp[i - 1][0][j], dp[i - 1][1][j - 1] + prices[i]);   // 卖出才算一次交易，因此j-1
                    dp[i][1][j] = Math.max(dp[i - 1][1][j], dp[i - 1][0][j] - prices[i]);
                }
            }
        }
        return Arrays.stream(dp[n - 1][0]).max().getAsInt();
    }

    public static void main(String[] args) {
        int[] stocks = new int[]{3, 2, 6, 5, 0, 3};
        System.out.println("你的答案:");
        System.out.println("数组 : " + Arrays.toString(stocks) + " 2次交易最大收益 : " + myMaxProfit(2, stocks));
        System.out.println("-------------------------->");
        System.out.println("正确答案:");
        System.out.println("数组 : " + Arrays.toString(stocks) + " 2次交易最大收益 : " + maxProfitV1(2, stocks));
        System.out.println("数组 : " + Arrays.toString(stocks) + " 2次交易最大收益 : " + maxProfitV2(2, stocks));
    }
}
