package com.holybell.algorithm.dp;

import java.util.Arrays;
import java.util.List;

/**
 * 难度:中等
 * <p>
 * 给定一个三角形 triangle ，找出自顶向下的最小路径和。
 * <p>
 * 每一步只能移动到下一行中相邻的结点上。
 * 相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，
 * 如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。
 * <p>
 * 示例 1：
 * 输入：triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
 * 输出：11
 * 解释：如下面简图所示：
 * 2
 * 3 4
 * 6 5 7
 * 4 1 8 3
 * 自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。
 * <p>
 * 示例 2：
 * 输入：triangle = [[-10]]
 * 输出：-10
 * <p>
 * 提示：
 * 1 <= triangle.length <= 200
 * triangle[0].length == 1
 * triangle[i].length == triangle[i - 1].length + 1
 * -104 <= triangle[i][j] <= 104
 * <p>
 * 进阶： 你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题吗？
 * <p>
 * 链接：https://leetcode-cn.com/problems/triangle
 */
public class LeetCode120_minimumTotal {

    /**
     * 求一个三角形从底部走到顶部的最小路径
     */
    private static int myMinimumTotal(List<List<Integer>> triangle) {
        return -1;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 动态规划  从底向上
     */
    private static int minimumTotalV1(List<List<Integer>> triangle) {
        int row = triangle.size();
        // 保存每个节点到底层的最短路径
        int[] minlen = new int[row + 1];
        // 从最底下一层开始往上走
        for (int level = row - 1; level >= 0; level--) {
            // 扫描当前行的某个位置应该从下一行哪个相邻位置走上来距离最短
            for (int i = 0; i <= level; i++) { // 第i行有i+1个数字 这个得从前往后，否则如果从后往前，minLen就会用到同一行后一个数字比较之后较小的值，重复计算了
                // System.out.println(java.util.Arrays.toString(minlen));

                // 理清楚数学关系: 每一行level对应level+1个元素
                // 从下往上，当前层 i 和 i+1 对应上一层的 i
                minlen[i] = Math.min(minlen[i], minlen[i + 1]) + triangle.get(level).get(i);
            }
        }
        return minlen[0];
    }

    // --------------------------------------------------------------------

    /**
     * 从顶向下
     */
    private static int minimumTotalV2(List<List<Integer>> triangle) {
        int n = triangle.size();

        // 记录从从顶点到每个节点的最小路径
        int[][] minPath = new int[n][n];

        // 第一行就一个节点，自己构成最小路径
        minPath[0][0] = triangle.get(0).get(0);

        // 循环遍历每一行
        for (int i = 1; i < n; i++) {

            // 每行左边界节点只有上一行的左边界才能下来
            minPath[i][0] = minPath[i - 1][0] + triangle.get(i).get(0);

            // 遍历每一行非左右边界节点，非边界节点最小路径： Math.min(minPath(i-1,j-1),minPath(i-1,j))+当前节点值
            for (int j = 1; j < i; j++) {
                minPath[i][j] = Math.min(minPath[i - 1][j - 1], minPath[i - 1][j]) + triangle.get(i).get(j);
            }

            // 每行的右边界只有上一行的右边界才能下来
            minPath[i][i] = minPath[i - 1][i - 1] + triangle.get(i).get(i);
        }

        // 从最后一行的每个节点中找出最短路径那个
        int min = minPath[n - 1][0];
        for (int num : minPath[n - 1]) {
            min = Math.min(min, num);
        }
        return min;
    }

    public static void main(String[] args) {
        List<List<Integer>> list = Arrays.asList(
                Arrays.asList(2),
                Arrays.asList(3, 4),
                Arrays.asList(6, 5, 7),
                Arrays.asList(4, 1, 8, 3)
        );

        System.out.println("你的解答:" + myMinimumTotal(list));
        System.out.println("------------------------------->");
        System.out.println("正确答案:" + minimumTotalV1(list));
    }
}
