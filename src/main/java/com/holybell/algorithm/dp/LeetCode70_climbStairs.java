package com.holybell.algorithm.dp;

import java.util.Arrays;

/**
 * 难度:简单
 * <p>
 * 本题其实就是 {@link LeetCode509_fib} 换了个问法而已!!!!
 * <p>
 * <p>
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
 * <p>
 * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 * <p>
 * 注意：给定 n 是一个正整数。
 * <p>
 * 示例 1：
 * <p>
 * 输入： 2
 * 输出： 2
 * 解释： 有两种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶
 * 2.  2 阶
 * <p>
 * 示例 2：
 * <p>
 * 输入： 3
 * 输出： 3
 * 解释： 有三种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶 + 1 阶
 * 2.  1 阶 + 2 阶
 * 3.  2 阶 + 1 阶
 * <p>
 * Related Topics 动态规划
 */
public class LeetCode70_climbStairs {

    private static int myClimbStairs(int n) {
        return -1;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 解法1:暴力递归  此解法超时
     */
    private static int climbStairsV1(int n) {

        if (n == 0) {
            return 1;
        }

        if (n == 1) {
            return 1;
        }

        return climbStairsV1(n - 1) + climbStairsV1(n - 2);
    }

    // --------------------------------------------------------------------

    /**
     * 解法2:递归 + 记忆
     */
    private static int climbStairsV2(int n) {

        int[] cache = new int[n + 1];
        Arrays.fill(cache, -1);
        return helper(n, cache);
    }

    private static int helper(int n, int[] cache) {

        if (n == 1 || n == 0) {
            return 1;
        }

        if (cache[n] != -1) {
            return cache[n];
        }

        int count = helper(n - 1, cache) + helper(n - 2, cache);
        cache[n] = count;
        return count;
    }

    // --------------------------------------------------------------------

    /**
     * 解法3: 动态规划
     */
    private static int climbStairsV3(int n) {

        int[] dp = new int[n + 1];
        dp[0] = dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }

    public static void main(String[] args) {
        System.out.println("你的答案:");
        System.out.println("攀爬3层阶梯走法:" + myClimbStairs(3));
        System.out.println("攀爬4层阶梯走法:" + myClimbStairs(4));
        System.out.println("攀爬5层阶梯走法:" + myClimbStairs(5));
        System.out.println("------------------------------->");
        System.out.println("正确答案:");
        System.out.println("攀爬3层阶梯走法:" + climbStairsV1(3));
        System.out.println("攀爬4层阶梯走法:" + climbStairsV2(4));
        System.out.println("攀爬5层阶梯走法:" + climbStairsV3(5));
    }
}
