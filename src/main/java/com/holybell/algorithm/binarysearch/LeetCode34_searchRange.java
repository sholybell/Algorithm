package com.holybell.algorithm.binarysearch;

import java.util.Arrays;

/**
 * 难度:中等
 * <p>
 * 给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
 * 如果数组中不存在目标值 target，返回 [-1, -1]。
 * <p>
 * 进阶：
 * 你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？
 * <p>
 * <p>
 * 示例 1：
 * 输入：nums = [5,7,7,8,8,10], target = 8
 * 输出：[3,4]
 * <p>
 * <p>
 * 示例 2：
 * 输入：nums = [5,7,7,8,8,10], target = 6
 * 输出：[-1,-1]
 * <p>
 * <p>
 * 示例 3：
 * 输入：nums = [], target = 0
 * 输出：[-1,-1]
 * <p>
 * <p>
 * 提示：
 * 0 <= nums.length <= 105
 * -109 <= nums[i] <= 109
 * nums 是一个非递减数组
 * -109 <= target <= 109
 * <p>
 * Related Topics 数组 二分查找
 */
public class LeetCode34_searchRange {

    private static int[] mySearchRange(int[] nums, int target) {
        return new int[]{-1, -1};
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    private static int[] searchRange(int[] nums, int target) {

        // 空数组，以及升序数组第一个元素大于target表示没有结果
        if (nums == null || nums.length == 0 || nums[0] > target) {
            return new int[]{-1, -1};
        }

        // 通过二分查找指定数字在数组的左右边界
        int left = searchBound(nums, target, true);
        int right = searchBound(nums, target, false);
        return new int[]{left, right};

    }

    /**
     * 二分查找元素上下界
     *
     * 如果看不懂注释可以参考 {@link BinarySearchDesc}
     * 或者文档 https://www.jianshu.com/p/78b2d3a054bf
     *
     */
    private static int searchBound(int[] nums, int target, boolean isLeft) {

        // 遍历区间[0, nums.length - 1]
        int begin = 0, end = nums.length - 1;
        // 终止条件 begin = end + 1
        // begin和end的区间 : begin [0,nums.length]  end [-1,nums.length-1]
        while (begin <= end) {

            int mid = begin + (end - begin) / 2;
            if (nums[mid] == target) {
                // 区分左右边界解法
                if (isLeft) {                   // 查找左边界，即第一个位置，不断压缩右边界
                    // 循环终止条件 ： begin = end + 1  若存在target，此时mid = end + 1 可得 end+1 = begin = mid (以mid为标准)
                    end = mid - 1;
                } else {                        // 查找右边界，即最后一个位置，不断压缩左边界
                    // 循环终止条件 ： begin = end + 1  若存在target,此时mid = begin -1 可得 begin-1 = end = mid (以mid为标准)
                    begin = mid + 1;
                }
            } else if (nums[mid] > target) {
                end = mid - 1;
            } else if (nums[mid] < target) {
                begin = mid + 1;
            }
        }

        // 求解左右边界时，需要返回的不一样
        if (isLeft) {
            // 求左边界，此时 mid = begin = end+1, begin取值区间 [0, nums.length]，有可能超过数组上界
            if (begin >= nums.length || nums[begin] != target) {
                return -1;
            }
            return begin;
        } else {
            // 求右边界，此时 mid = end = begin-1, end取值区间 [-1, nums.length-1]，有可能超过数组上界
            if (end < 0 || nums[end] != target) {
                return -1;
            }
            return end;
        }
    }

    public static void main(String[] args) {
        int[] nums = new int[]{5, 7, 7, 8, 8, 10};

        System.out.println("你的答案:");
        System.out.println("数组 : " + Arrays.toString(nums) + " 元素8的左右边界为 : " + Arrays.toString(mySearchRange(nums, 8)));
        System.out.println("数组 : " + Arrays.toString(nums) + " 元素6的左右边界为 : " + Arrays.toString(mySearchRange(nums, 6)));
        System.out.println("-------------------------->");
        System.out.println("正确答案:");
        System.out.println("数组 : " + Arrays.toString(nums) + " 元素8的左右边界为 : " + Arrays.toString(searchRange(nums, 8)));
        System.out.println("数组 : " + Arrays.toString(nums) + " 元素6的左右边界为 : " + Arrays.toString(searchRange(nums, 6)));
    }
}
