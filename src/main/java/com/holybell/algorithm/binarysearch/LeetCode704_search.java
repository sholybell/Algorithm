package com.holybell.algorithm.binarysearch;

/**
 * 难度：简单
 * <p>
 * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，
 * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。
 * <p>
 * 示例 1:
 * 输入: nums = [-1,0,3,5,9,12], target = 9
 * 输出: 4
 * 解释: 9 出现在 nums 中并且下标为 4
 * <p>
 * 示例 2:
 * 输入: nums = [-1,0,3,5,9,12], target = 2
 * 输出: -1
 * 解释: 2 不存在 nums 中因此返回 -1
 * <p>
 * 提示：
 * 你可以假设 nums 中的所有元素是不重复的。
 * n 将在 [1, 10000]之间。
 * nums 的每个元素都将在 [-9999, 9999]之间。
 */
public class LeetCode704_search {

    private static int _search(int[] nums, int target) {
        return -1;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 通过二分查找在一个有序且不重复的数组中查询某个元素
     *
     * @param nums   有序，不重复数组
     * @param target 目标元素
     * @return 目标元素下标
     */
    private static int search(int[] nums, int target) {
        // 如果数组为空，直接返回-1
        if (nums == null || nums.length == 0) {
            return -1;
        }

        // 二分查找的左右指针
        // 注意这个右指针的选择范围将影响下面while条件，当right=nums.length-1的时候，搜索的范围是[left,right]，左闭右闭区间
        int left = 0, right = nums.length - 1;

        // left <= right 的终止循环条件为 left >= right + 1，结合上面的双闭区间，假设left=2,即[3,2]这个区间是终止条件，此区间没有剩余元素未被查询
        // 如果使用 left < right作为条件，则 left >= right 即为终止循环的条件，再次假设left=2，存在[2,2]这个区间是终止条件，很明显2这个下标未被查询   !!!!!
        while (left <= right) {
            int mid = left + (right - left) / 2;    // 这么做主要是为了防止数字过大溢出，不然直接（left+right）/2也是中间值
            // 找到目标，返回下标
            if (nums[mid] == target) {
                return mid;
            }
            // 发现中间值大于目标，那么应该将查询范围缩小到中间值的左侧区间，记住，这里使用的是双闭区间，因此此时的查找区间应为[left,mid-1]，因为mid已经判断过了
            else if (nums[mid] > target) {
                right = mid - 1;
            }
            // 发现中间值小于目标，那么应该将查询范围缩小到中间值的右侧区间，记住，这里使用的是双闭区间，因此此时的查找区间应为[mid+1,right]，因为mid已经判断过了
            else if (nums[mid] < target) {
                left = mid + 1;
            }
        }
        return -1;
    }

    /**
     * 通过二分查找在一个有序且不重复的数组中查询某个元素(主要和以上的解法做左闭右开区间的区别比较)
     *
     * @param nums   有序，不重复数组
     * @param target 目标元素
     * @return 目标元素下标
     */
    private static int searchV2(int[] nums, int target) {
        // 如果数组为空，直接返回-1
        if (nums == null || nums.length == 0) {
            return -1;
        }

        // 二分查找的左右指针
        // 注意这个右指针的选择范围将影响下面while条件，当right=nums.length-1的时候，搜索的范围是[left,right)，左闭右开区间
        int left = 0, right = nums.length;

        // 使用 left < right作为条件，则 left >= right 即为终止循环的条件，假设left=2，存在[2,2)这个区间是终止条件，很明显这个区间没有剩余元素未被检索
        while (left < right) {
            int mid = left + (right - left) / 2;    // 这么做主要是为了防止数字过大溢出，不然直接（left+right）/2也是中间值
            // 找到目标，返回下标
            if (nums[mid] == target) {
                return mid;
            }
            // 发现中间值大于目标，那么应该将查询范围缩小到中间值的左侧区间，记住，这里使用的是左闭右开区间，因此此时的查找区间应为[left,mid-1)，因为mid已经判断过了
            else if (nums[mid] > target) {
                right = mid;
            }
            // 发现中间值小于目标，那么应该将查询范围缩小到中间值的右侧区间，记住，这里使用的是左闭右开区间，因此此时的查找区间应为[mid+1,right)，因为mid已经判断过了
            else if (nums[mid] < target) {
                left = mid + 1;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int[] nums = new int[]{-1, 0, 3, 5, 9, 12};
        int target = 9;
        System.out.println("你的答案:");
        System.out.println(_search(nums, target));
        System.out.println("------------------------->");
        System.out.println("正确答案:");
        System.out.println(search(nums, target));
        System.out.println("正确答案V2:");
        System.out.println(searchV2(nums, target));
    }
}
