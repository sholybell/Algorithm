package com.holybell.algorithm.backtrack;


import com.holybell.algorithm.common.Base;
import com.holybell.algorithm.common.util.ArrayUtil;

import java.util.ArrayList;
import java.util.List;

/**
 * 难度：困难
 * <p>
 * 一个数独的解法需遵循如下规则：
 * <p>
 * 数字 1-9 在每一行只能出现一次。 数字 1-9 在每一列只能出现一次。 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * 空白格用 '.' 表示。
 * <p>
 * 链接：https://leetcode-cn.com/problems/sudoku-solver
 */
public class LeetCode37_solveSudoku extends Base {

    private static void mySolveSudoku(char[][] board) {

    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    private static boolean isValid = false;

    private static void solveSudoku(char[][] board) {
        // 重置全局变量以便二次使用
        isValid = false;

        // 数独要求横、竖、九宫格内不能出现重复的数字分别使用三个多维数组表示第几行、第几列、第几个九宫格已经有哪个数字占据
        boolean[][] lines = new boolean[9][10];
        boolean[][] columns = new boolean[9][10];
        boolean[][][] blocks = new boolean[3][3][10];

        // 记录数独中需要填充数字的横竖坐标
        List<int[]> spaces = new ArrayList<>();

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    spaces.add(new int[]{i, j});
                } else {
                    // TODO 这里将字符转换为1-9的整数
                    int digit = (int) (board[i][j] - '0');
                    // 将数独题目中原本就存在的数字标记在横、竖、九宫格多维数组上，表示这些数字已经不能使用
                    lines[i][digit] = columns[j][digit] = blocks[i / 3][j / 3][digit] = true;
                }
            }
        }

        backtract(board, 0, spaces, lines, columns, blocks);
    }

    private static void backtract(char[][] board, int pos, List<int[]> spaces, boolean[][] lines, boolean[][] columns, boolean[][][] blocks) {

        if (pos == spaces.size()) {
            isValid = true;
            return;
        }

        // 获取本次需要填充数字的横纵坐标
        int[] space = spaces.get(pos);
        int i = space[0], j = space[1];

        // 这里有个特殊情况，如果循环终止条件没有isValid，将会导致递归出结果之后，之后的递归层次覆盖了正确结果
        for (int digit = 1; digit <= 9 && !isValid; digit++) {
            if (!lines[i][digit] && !columns[j][digit] && !blocks[i / 3][j / 3][digit]) {
                // TODO 将整数转换为响应的字符
                board[i][j] = (char) (digit + '0');
                lines[i][digit] = columns[j][digit] = blocks[i / 3][j / 3][digit] = true;
                backtract(board, pos + 1, spaces, lines, columns, blocks);
                lines[i][digit] = columns[j][digit] = blocks[i / 3][j / 3][digit] = false;
            }
        }
    }

    public static void main(String[] args) {
        char[][] board1 = new char[][]{
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };

        char[][] board2 = new char[][]{
                {'.', '.', '9', '7', '4', '8', '.', '.', '.'},
                {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '2', '.', '1', '.', '9', '.', '.', '.'},
                {'.', '.', '7', '.', '.', '.', '2', '4', '.'},
                {'.', '6', '4', '.', '1', '.', '5', '9', '.'},
                {'.', '9', '8', '.', '.', '.', '3', '.', '.'},
                {'.', '.', '.', '8', '.', '3', '.', '2', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '6'},
                {'.', '.', '.', '2', '7', '5', '9', '.', '.'}
        };

        System.out.println("你的答案:");
        System.out.println("数独1的解答:");
        mySolveSudoku(board1);
        ArrayUtil.printBoard(board1);
        System.out.println("数独2的解答:");
        mySolveSudoku(board2);
        ArrayUtil.printBoard(board2);

        System.out.println("----------------------------->");

        board1 = new char[][]{
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };

        board2 = new char[][]{
                {'.', '.', '9', '7', '4', '8', '.', '.', '.'},
                {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '2', '.', '1', '.', '9', '.', '.', '.'},
                {'.', '.', '7', '.', '.', '.', '2', '4', '.'},
                {'.', '6', '4', '.', '1', '.', '5', '9', '.'},
                {'.', '9', '8', '.', '.', '.', '3', '.', '.'},
                {'.', '.', '.', '8', '.', '3', '.', '2', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '6'},
                {'.', '.', '.', '2', '7', '5', '9', '.', '.'}
        };

        System.out.println("正确答案:");
        System.out.println("数独1的解答:");
        solveSudoku(board1);
        ArrayUtil.printBoard(board1);
        System.out.println("数独2的解答:");
        solveSudoku(board2);
        ArrayUtil.printBoard(board2);
    }
}
