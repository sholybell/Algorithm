package com.holybell.algorithm.tree.bfs;

import java.util.*;

/**
 * 难度:中等
 * <p>
 * 你有一个带有四个圆形拨轮的转盘锁。
 * 每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'。
 * 每个拨轮可以自由旋转：例如把 '9' 变为 '0'，'0' 变为 '9' 。
 * 每次旋转都只能旋转一个拨轮的一位数字。
 * <p>
 * 锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。
 * 列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。
 * 字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。
 * <p>
 * 示例 1:
 * 输入：deadends = ["0201","0101","0102","1212","2002"], target = "0202"
 * 输出：6
 * 解释：
 * 可能的移动序列为 "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202"。
 * 注意 "0000" -> "0001" -> "0002" -> "0102" -> "0202" 这样的序列是不能解锁的，
 * 因为当拨动到 "0102" 时这个锁就会被锁定。
 * <p>
 * 示例 2:
 * 输入: deadends = ["8888"], target = "0009"
 * 输出：1
 * 解释：
 * 把最后一位反向旋转一次即可 "0000" -> "0009"。
 * <p>
 * 示例 3:
 * 输入: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"
 * 输出：-1
 * 解释：
 * 无法旋转到目标数字且不被锁定。
 * <p>
 * 示例 4:
 * 输入: deadends = ["0000"], target = "8888"
 * 输出：-1
 * <p>
 * 提示：
 * 死亡列表 deadends 的长度范围为 [1, 500]。
 * 目标数字 target 不会在 deadends 之中。
 * 每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 '0000' 到 '9999' 中产生。
 */
public class LeetCode752_openLock {

    private static int _openLock(String[] deadends, String target) {
        return -1;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 打开四位转盘锁
     *
     * @param deadends 死亡数字
     * @param target   开锁密码
     * @return 开锁的转动不熟
     */
    private static int openLock(String[] deadends, String target) {

        // 使用Set保存死亡节点，用于后续判断当前步数不可走
        Set<String> deadendSet = new HashSet<>(Arrays.asList(deadends));

        // 利用队列先进先出的特性，通过BFS算法，缓存一个节点扩展出去一层中未被遍历的节点集合
        Queue<String> q = new LinkedList<>();
        // 本题可以理解为一个从0000开始，每位数字变动的可能性衍生出一颗子树的多叉树情况
        q.offer("0000");

        // 使用Set保存已经走过的结果
        Set<String> visited = new HashSet<>();
        visited.add("0000");

        int step = 0;

        // 队列未空，表示仍有可以走的步数未处理（多叉树节点未验证是否为结果）
        while (!q.isEmpty()) {

            // 当前需要扫描处理的节点数
            int size = q.size();

            // 不要把循环终止条件size直接使用q.size()，因为队列q在下面的处理中，一直在增删元素，大小会变动
            // 当前循环表示广度优选搜索一层，代表走了一步
            for (int i = 0; i < size; i++) {
                // 从队列中弹出队首元素处理
                String cur = q.poll();

                // 找到目标密码数字，返回经历的步数
                if (cur.equals(target)) {
                    return step;
                }

                // 当前节点是死亡节点，不能采纳
                if (deadendSet.contains(cur)) {
                    continue;
                }

                // 接下来，将当前节点周边未遍历过的节点都添加到队列q中

                // 每个节点都有4位数字，每个数字可以往前和往后调整1位数字
                for (int j = 0; j < 4; j++) {
                    // 添加当前节点每个数字+1得到的下一层节点
                    String nextNode = plusOne(cur, j);
                    // 存在visited集合表示当前节点已经被存放到q队列中处理过，不需要在添加一次
                    if (!visited.contains(nextNode)) {
                        q.offer(nextNode);
                        visited.add(nextNode);
                    }
                    // 添加当前节点每个数字-1得到的下一层节点
                    nextNode = minusOne(cur, j);
                    // 存在visited集合表示当前节点已经被存放到q队列中处理过，不需要在添加一次
                    if (!visited.contains(nextNode)) {
                        q.offer(nextNode);
                        visited.add(nextNode);
                    }
                }
            }
            // 遍历完一层没有找到目标，步数+1，继续遍历下一层
            step++;
        }

        return -1;
    }

    /**
     * 为当前的4字密码进行+1操作
     *
     * @param node 四字密码节点
     * @param j    要+1的数字
     * @return 新的节点值
     */
    private static String plusOne(String node, int j) {
        char[] chars = node.toCharArray();
        if (chars[j] == '9') {
            chars[j] = '0';
        } else {
            chars[j] += 1;
        }
        return new String(chars);
    }

    /**
     * 为当前的4字密码进行-1操作
     *
     * @param node 四字密码节点
     * @param j    要-1的数字
     * @return 新的节点值
     */
    private static String minusOne(String node, int j) {
        char[] chars = node.toCharArray();
        if (chars[j] == '0') {
            chars[j] = '9';
        } else {
            chars[j] -= 1;
        }
        return new String(chars);
    }

    public static void main(String[] args) {
        String[] deadends = new String[]{"0201", "0101", "0102", "1212", "2002"};
        String target = "0202";
        System.out.println("你的答案:");
        System.out.println(_openLock(deadends, target));
        System.out.println("---------------------------->");
        System.out.println("正确答案:");
        System.out.println(openLock(deadends, target));
    }
}
