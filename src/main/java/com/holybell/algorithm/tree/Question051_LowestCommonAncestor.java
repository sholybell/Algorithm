package com.holybell.algorithm.tree;

import com.holybell.algorithm.common.TreeNode;

/**
 * 难度:简单
 * <p>
 * 给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。
 * <p>
 * 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x
 * 的深度尽可能大（一个节点也可以是它自己的祖先）。”
 * <p>
 * 其实就是求最后一个让他们分叉的节点，分叉节点的父节点也是祖先节点
 * <p>
 * https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
 */
public class Question051_LowestCommonAncestor {


    /**
     * 查找二叉树中节点p和节点q的分支节点
     * <p>
     * 二叉搜索树符合每个节点都比所有左子节点大，比所有右子节点小
     *
     * @param root 当前要判断是否为分支节点的节点
     */
    private static TreeNode myLowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {

        return new TreeNode();
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 查找二叉树中节点p和节点q的分支节点
     * <p>
     * 二叉搜索树符合每个节点都比所有左子节点大，比所有右子节点小
     *
     * @param root 当前要判断是否为分支节点的节点
     */
    private static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {

        // 当前节点值
        int curVal = root.data;
        // 节点p的值
        int pVal = p.data;
        // 节点q的值
        int qVal = q.data;


        if (pVal > curVal && qVal > curVal) {   // 节点p和节点q的值都比当前节点大
            // 递归到右子节点判断
            return lowestCommonAncestor(root.right, p, q);
        } else if (pVal < curVal && qVal < curVal) {    // 节点p和节点q的值都比当前节点小
            // 递归到左子节点判断
            return lowestCommonAncestor(root.left, p, q);
        } else {
            // p\q两个值刚好将当前节点夹在中间，那么就是当前节点
            return root;
        }
    }

    public static void main(String[] args) {
        TreeNode node6 = new TreeNode(6);
        TreeNode node2 = new TreeNode(2);
        TreeNode node8 = new TreeNode(8);
        TreeNode node0 = new TreeNode(0);
        TreeNode node4 = new TreeNode(4);
        TreeNode node7 = new TreeNode(7);
        TreeNode node9 = new TreeNode(9);
        TreeNode node3 = new TreeNode(3);
        TreeNode node5 = new TreeNode(5);

        node6.left = node2;
        node6.right = node8;
        node2.left = node0;
        node2.right = node4;
        node4.left = node3;
        node4.right = node5;
        node8.left = node7;
        node8.right = node9;

        System.out.println("正确答案:" + lowestCommonAncestor(node6, node2, node4).data);
        System.out.println("正确答案:" + lowestCommonAncestor(node6, node2, node8).data);

        System.out.println("--------------->");

        System.out.println("本次答案:" + myLowestCommonAncestor(node6, node2, node4).data);
        System.out.println("本次答案:" + myLowestCommonAncestor(node6, node2, node8).data);
    }
}
