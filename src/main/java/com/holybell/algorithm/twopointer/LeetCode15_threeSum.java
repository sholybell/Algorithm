package com.holybell.algorithm.twopointer;

import com.alibaba.fastjson.JSONObject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * 难度:中等
 * <p>
 * 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。
 * 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。
 * 你可以按任意顺序返回答案。
 * <p>
 * <p>
 * 示例 1：
 * 输入：nums = [2,7,11,15], target = 9
 * 输出：[0,1]
 * 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
 * <p>
 * <p>
 * 示例 2：
 * 输入：nums = [3,2,4], target = 6
 * 输出：[1,2]
 * <p>
 * <p>
 * 示例 3：
 * 输入：nums = [3,3], target = 6
 * 输出：[0,1]
 * <p>
 * <p>
 * 提示：
 * <p>
 * <p>
 * 2 <= nums.length <= 103
 * -109 <= nums[i] <= 109
 * -109 <= target <= 109
 * 只会存在一个有效答案
 */
public class LeetCode15_threeSum {

    private static List<List<Integer>> myThreeSum(int[] nums) {
        return new ArrayList<>();
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    private static List<List<Integer>> threeSum(int[] nums) {

        // 首先排除数组异常的情况
        if (nums == null || nums.length == 0) {
            return new ArrayList<>();
        }

        List<List<Integer>> ans = new ArrayList<>();

        // 将数组从小到大排序
        Arrays.sort(nums);

        // 注意，由于左右指针的存在，i的变动范围为数组倒数第三个元素
        for (int i = 0; i < nums.length - 2; i++) {

            // 如果当前元素大于0，那么后面不可能存在3元组和为0,
            if (nums[i] > 0) {
                break;
            }

            // 相同的数字前面处理过，跳过
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }

            int target = -nums[i];
            // 在剩余的数组成员中，使用左右之中，不断地往中间靠拢
            int left = i + 1, right = nums.length - 1;

            // 终止条件为left = right
            while (left < right) {
                if (nums[left] + nums[right] == target) {
                    // 查询到三元组之后，放入结果集合中
                    ans.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    // 左右指针同时往内部收缩，同时如果收缩之后的数字和收缩之前的数字相同，继续收缩
                    while (left < right && nums[left] == nums[++left]) {
                    }
                    while (left < right && nums[right] == nums[--right]) {
                    }
                } else if (nums[left] + nums[right] < target) {
                    // 同上说明
                    while (left < right && nums[left] == nums[++left]) {
                    }
                } else {
                    // 同上说明
                    while (left < right && nums[right] == nums[--right]) {
                    }
                }
            }
        }

        return ans;
    }

    public static void main(String[] args) {
        int[] nums1 = new int[]{-1, 0, 1, 2, -1, -4};
        int[] nums2 = new int[]{-2, 0, 0, 2, 2};

        System.out.println("你的答案:");
        System.out.println(Arrays.toString(nums1) + " 不重复三元组和为0 :" + JSONObject.toJSONString(myThreeSum(nums1)));
        System.out.println(Arrays.toString(nums2) + " 不重复三元组和为0 :" + JSONObject.toJSONString(myThreeSum(nums2)));

        System.out.println();

        System.out.println("正确答案:");
        System.out.println(Arrays.toString(nums1) + " 不重复三元组和为0 :" + JSONObject.toJSONString(threeSum(nums1)));
        System.out.println(Arrays.toString(nums2) + " 不重复三元组和为0 :" + JSONObject.toJSONString(threeSum(nums2)));
    }
}
