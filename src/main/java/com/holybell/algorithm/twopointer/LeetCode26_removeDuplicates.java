package com.holybell.algorithm.twopointer;

import java.util.Arrays;

/**
 * 难度:简单
 * <p>
 * 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。
 * 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
 * <p>
 * <p>
 * <p>
 * 为什么返回数值是整数，但输出的答案是数组呢?
 * 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
 * <p>
 * 你可以想象内部操作如下:
 * nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
 * int len = removeDuplicates(nums);
 * <p>
 * 在函数里修改输入数组对于调用者是可见的。
 * 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
 * for (int i = 0; i < len; i++) {
 *     print(nums[i]);
 * }
 * <p>
 * <p>
 * 示例 1：
 * 输入：nums = [1,1,2]
 * 输出：2, nums = [1,2]
 * 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
 * <p>
 * <p>
 * 示例 2：
 * 输入：nums = [0,0,1,1,1,2,2,3,3,4]
 * 输出：5, nums = [0,1,2,3,4]
 * 解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
 * <p>
 * <p>
 * 提示：
 * 0 <= nums.length <= 3 * 104
 * -104 <= nums[i] <= 104
 * nums 已按升序排列
 * <p>
 * Related Topics 数组 双指针
 */
public class LeetCode26_removeDuplicates {

    public int removeDuplicates(int[] nums) {
        return 0;
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    public int removeDuplicatesV1(int[] nums) {

        // 数组为空或者长度为0则返回0
        if (nums == null || nums.length == 0) {
            return 0;
        }

        // 数组长度为1，直接返回1
        if (nums.length == 1) {
            return 1;
        }

        // 数组第一个元素不需要遍历
        int preNum = nums[0];   // 当前用比较是否重复的数字
        int pos = 1;            // 当前要填充数字的索引位置
        for (int i = 1; i < nums.length; i++) {
            // 当前位置的数字还是和前面的数字有重复
            if (nums[i] == preNum) {
                continue;
            } else if (nums[i] != preNum) {
                // 将当前数字填充到指定pos位置
                nums[pos] = nums[i];
                pos++;
                preNum = nums[i];
            }
        }

        // pos表示要被填充的位置，由于数组从0开始，pos不属于要输出的范围，刚好输出pos即为目标数组长度
        return pos;
    }

    // --------------------------------------------------------------------

    public int removeDuplicatesV2(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        int i = 0;
        for (int j = 1; j < nums.length; j++) {
            if (nums[j] != nums[i]) {
                i++;
                nums[i] = nums[j];
            }
        }
        return i + 1;
    }

    public static void main(String[] args) {
        LeetCode26_removeDuplicates removeDuplicates = new LeetCode26_removeDuplicates();
        int[] nums1 = new int[]{0, 0, 1, 1, 1, 2, 2, 3, 3, 4};
        System.out.println("你的答案:");
        int[] nums2 = Arrays.copyOf(nums1, nums1.length);
        int len2 = removeDuplicates.removeDuplicates(nums2);
        System.out.println("数组 : " + Arrays.toString(nums2) + " 去重之后长度为 : " + len2 + " 不重复数组为 : " + Arrays.toString(Arrays.copyOf(nums2, len2)));
        System.out.println("---------------------------->");
        System.out.println("正确答案:");
        nums2 = Arrays.copyOf(nums1, nums1.length);
        len2 = removeDuplicates.removeDuplicatesV2(nums2);
        System.out.println("数组 : " + Arrays.toString(nums2) + " 去重之后长度为 : " + len2 + " 不重复数组为 : " + Arrays.toString(Arrays.copyOf(nums2, len2)));
    }
}
