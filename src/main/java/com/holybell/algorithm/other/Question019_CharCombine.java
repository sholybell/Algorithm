package com.holybell.algorithm.other;

/**
 * 难度：困难
 * <p>
 * 如何输出字符串的所有组合
 * <p>
 * 问题描述：假设字符串中所有的字符都不重复，如何输出字符串的所有组合？例如，输入字符串“abc”，则输出a、b、c、ab、ac、bc、abc，共七种组合
 * <p>
 * 根据题意，如果字符串中有n个字符，根据排列组合的特性，此时一共需要输出2^n-1种组合。
 */
public class Question019_CharCombine {

    /**
     * @param c     本次要排序的字符
     * @param begin 排序起始位置
     * @param len   排序的长度
     * @param sb    记录最终结果
     */
    private static void myCombine(char[] c, int begin, int len, StringBuffer sb) {


    }


    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------


    /**
     * @param c     本次要排序的字符
     * @param begin 排序起始位置
     * @param len   排序的长度
     * @param sb    记录最终结果
     */
    private static void combine(char[] c, int begin, int len, StringBuffer sb) {

        // 待排序长度为0则输出结果，这个要在下一个判断之前，否则当len=0，且begin==c.length同时符合的时候，没有结果输出
        if (len == 0) {
            System.out.println(sb + " ");
            return;
        }

        if (begin == c.length) {
            return;
        }

        // 选取当前字符
        sb.append(c[begin]);
        // 用来拼接一个新的字符到字符串后面
        combine(c, begin + 1, len - 1, sb);

        // 不选取当前字符
        sb.deleteCharAt(sb.length() - 1);
        // 用来删除最后一个元素，结合上一个语句
        combine(c, begin + 1, len, sb);
    }


    public static void main(String[] args) {
        String s = "abc";
        char[] c = s.toCharArray();
        StringBuffer sb = new StringBuffer("");
        int len = c.length;

        System.out.println("======正确答案======");
        for (int i = 1; i <= len; i++) {
            combine(c, 0, i, sb);
        }

        System.out.println("======本次解答======");
        StringBuffer sb2 = new StringBuffer("");
        for (int i = 1; i <= len; i++) {
            myCombine(c, 0, i, sb2);
        }
    }
}
