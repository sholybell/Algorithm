package com.holybell.algorithm.other;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * 设计一个LRU缓存
 */
public class Question027_LruCache {

    static class myLruCache extends LinkedHashMap<Integer, Integer> {

        private int capacity;

        public myLruCache(int capacity) {

        }

        public int get(int key) {
            return -1;
        }

        public void put(int key, int value) {

        }

        @Override
        protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {
            return false;
        }
    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    static class LruCache extends LinkedHashMap<Integer, Integer> {

        private int capacity;

        public LruCache(int capacity) {
            super(capacity, 0.75f, true);
            this.capacity = capacity;
        }

        public int get(int key) {
            return super.get(key);
        }

        public void put(int key, int value) {
            super.put(key, value);
        }

        @Override
        protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {
            return size() > capacity;
        }
    }


    public static void main(String[] args) {
        LruCache lruCache = new LruCache(5);
        lruCache.put(0, 0);
        lruCache.put(1, 1);
        lruCache.put(2, 2);
        lruCache.put(3, 3);
        lruCache.get(0);
        lruCache.put(4, 4);
        lruCache.put(5, 5);
        // 由于0访问过一次，因此1被移除了缓存
        lruCache.forEach((k, v) -> System.out.println(k + ":" + v));

        System.out.println("--------------------------------->");

        myLruCache myLruCache = new myLruCache(5);
        myLruCache.put(0, 0);
        myLruCache.put(1, 1);
        myLruCache.put(2, 2);
        myLruCache.put(3, 3);
        myLruCache.get(0);
        myLruCache.put(4, 4);
        myLruCache.put(5, 5);
        // 由于0访问过一次，因此1被移除了缓存
        myLruCache.forEach((k, v) -> System.out.println(k + ":" + v));
    }

}
