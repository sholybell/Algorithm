package com.holybell.algorithm.other;

import java.util.ArrayList;
import java.util.List;

/**
 * 难度：中等
 * <p>
 * 给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。
 * <p>
 * 例如，给出 n = 3，生成结果为：
 * <p>
 * [ "((()))", "(()())", "(())()", "()(())", "()()()" ]
 * <p>
 * 链接：https://leetcode-cn.com/problems/generate-parentheses
 */
public class Question016_GenerateParenthesis {

    /**
     * 给定n对括号，求有效的括号组合
     *
     * @param n 括号对数
     */
    private static List<String> myGenerateParenthesis(int n) {

        return null;
    }

    /**
     * @param ans   输出结果集合
     * @param cur   当前的组合字符串
     * @param open  左括号使用数量
     * @param close 右括号使用数量
     * @param max   最大括号对数
     */
    private static void myBacktrack(List<String> ans, String cur, int open, int close, int max) {

    }

    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------
    // --------------------------------------------------------------------

    /**
     * 给定n对括号，求有效的括号组合
     *
     * @param n 括号对数
     */
    private static List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>(n);

        if (n <= 0) {
            return result;
        }

        myBacktrack(result, "", 0, 0, n);
        return result;
    }

    /**
     * @param ans   输出结果集合
     * @param cur   当前的组合字符串
     * @param open  左括号使用数量
     * @param close 右括号使用数量
     * @param max   最大括号对数
     */
    private static void backtrack(List<String> ans, String cur, int open, int close, int max) {

        if (cur.length() == max * 2) {
            ans.add(cur);
            return;
        }

        if (open < max)
            backtrack(ans, cur + "(", open + 1, close, max);
        if (close < open)
            backtrack(ans, cur + ")", open, close + 1, max);
    }

    public static void main(String[] args) {
        System.out.println("正确答案：" + generateParenthesis(3));
        System.out.println("----------------->");
        System.out.println("本次解答：" + myGenerateParenthesis(3));
    }

}
